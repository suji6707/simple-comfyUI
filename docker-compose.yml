services:
  # PostgreSQL Database
  # postgres:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER:-user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
  #     POSTGRES_DB: ${POSTGRES_DB:-comfyui_service}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   profiles:
  #     - "off"

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    network_mode: host
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@localhost:5432/${POSTGRES_DB:-comfyui_service}
      REDIS_URL: redis://localhost:6380/0
      CELERY_BROKER_URL: redis://localhost:6380/1
      CELERY_RESULT_BACKEND: redis://localhost:6380/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      STATIC_FILES_URL: ${STATIC_FILES_URL:-http://localhost:8000/static/images}
    volumes:
      - ./backend:/app
      - model_cache:/tmp/models
      - generated_images:/tmp/generated_images
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app

  # Celery Worker (with GPU support)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery_worker worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@localhost:5432/${POSTGRES_DB:-comfyui_service}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      STATIC_FILES_URL: ${STATIC_FILES_URL:-http://localhost:8000/static/images}
      MODEL_CACHE_DIR: /tmp/models
      CUDA_VISIBLE_DEVICES: all
    volumes:
      - ./backend:/app
      - model_cache:/tmp/models
      - generated_images:/tmp/generated_images
    runtime: nvidia
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery_worker beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@localhost:5432/${POSTGRES_DB:-comfyui_service}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
    volumes:
      - ./backend:/app

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.workers.celery_worker flower --port=5555
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@localhost:5432/${POSTGRES_DB:-comfyui_service}
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      FLOWER_BROKER_API: redis://host.docker.internal:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - backend

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

volumes:
  postgres_data:
  redis_data:
  model_cache:
  generated_images:
  minio_data:
